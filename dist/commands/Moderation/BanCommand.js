"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const discord_js_1 = require("discord.js");
const Bans_1 = require("../../database/Models/Bans");
class BanCommand extends discord_akairo_1.Command {
    constructor() {
        super("ban", {
            aliases: ["ban"],
            category: "Moderation",
            description: {
                content: "bans a member from the guild",
                usage: "ban [member] [reason]",
                examples: [
                    "ban @Nemijah#6391 posing nsfw images",
                    "ban Developer | Toby posting nsfw images"
                ]
            },
            ratelimit: 3,
            userPermissions: ["BAN_MEMBERS"],
            args: [
                {
                    id: "member",
                    type: "member",
                    prompt: {
                        start: (msg) => `${msg.author}, please provide a member to ban...`,
                        retry: (msg) => `${msg.author}, please provide a vaild member to ban...`
                    }
                },
                {
                    id: "reason",
                    type: "string",
                    match: "rest",
                    default: "swearing"
                }
            ]
        });
    }
    async exec(message, { member, reason }) {
        const banRepo = this.client.db.getRepository(Bans_1.Bans);
        if (member.roles.highest.position >= message.member.roles.highest.position && message.author.id != message.guild.ownerID)
            return message.channel.send(`${message.author.tag}. you're not allowed to ban ${member.user.tag}`);
        member.ban();
        await message.channel.send(new discord_js_1.MessageEmbed()
            .setTitle(message.guild.name)
            .addFields({ name: "Member ", value: member.user.tag, inline: true }, { name: "Reason ", value: reason, inline: true }, { name: "Moderator ", value: message.author.tag, inline: false }, { name: "Moderator id ", value: message.author.id, inline: false })
            .setTimestamp()
            .setFooter(member.user.displayAvatarURL({ dynamic: true }) + member.user.tag + " has been banned")
            .setThumbnail(message.guild.iconURL({ dynamic: true })));
        await banRepo.insert({
            guild: message.guild.id,
            user: member.id,
            moderator: message.author.id,
            reason: reason
        });
    }
}
exports.default = BanCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFuQ29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9Nb2RlcmF0aW9uL0JhbkNvbW1hbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBeUM7QUFDekMsMkNBQWdFO0FBQ2hFLHFEQUFrRDtBQUdsRCxNQUFxQixVQUFXLFNBQVEsd0JBQU87SUFDM0M7UUFDSSxLQUFLLENBQUMsS0FBSyxFQUFFO1lBQ1QsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDO1lBQ2hCLFFBQVEsRUFBRSxZQUFZO1lBQ3RCLFdBQVcsRUFBRTtnQkFDVCxPQUFPLEVBQUUsOEJBQThCO2dCQUN2QyxLQUFLLEVBQUUsdUJBQXVCO2dCQUM5QixRQUFRLEVBQUU7b0JBQ04sc0NBQXNDO29CQUN0QywwQ0FBMEM7aUJBQzdDO2FBQ0o7WUFDRCxTQUFTLEVBQUUsQ0FBQztZQUNaLGVBQWUsRUFBRSxDQUFDLGFBQWEsQ0FBQztZQUNoQyxJQUFJLEVBQUU7Z0JBQ0Y7b0JBQ0ksRUFBRSxFQUFFLFFBQVE7b0JBQ1osSUFBSSxFQUFFLFFBQVE7b0JBQ2QsTUFBTSxFQUFFO3dCQUNKLEtBQUssRUFBRSxDQUFDLEdBQVksRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxxQ0FBcUM7d0JBQzNFLEtBQUssRUFBRSxDQUFDLEdBQVksRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSwyQ0FBMkM7cUJBQ3BGO2lCQUNKO2dCQUNEO29CQUNJLEVBQUUsRUFBRSxRQUFRO29CQUNaLElBQUksRUFBRSxRQUFRO29CQUNkLEtBQUssRUFBRSxNQUFNO29CQUNiLE9BQU8sRUFBRSxVQUFVO2lCQUN0QjthQUNKO1NBQ0osQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBZ0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQXlDO1FBQ3pGLE1BQU0sT0FBTyxHQUFxQixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsV0FBSSxDQUFDLENBQUM7UUFFckUsSUFBRyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU87WUFDbkgsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRywrQkFBK0IsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBR3ZHLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUViLE1BQU0sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSx5QkFBWSxFQUFFO2FBQ3hDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQzthQUM1QixTQUFTLENBQ04sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFDLEVBQ3hELEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUMsRUFDL0MsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLEVBQy9ELEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxDQUNwRTthQUNBLFlBQVksRUFBRTthQUNkLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsa0JBQWtCLENBQUM7YUFDaEcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FDMUQsQ0FBQztRQUVGLE1BQU0sT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUNqQixLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3ZCLElBQUksRUFBRSxNQUFNLENBQUMsRUFBRTtZQUNmLFNBQVMsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDNUIsTUFBTSxFQUFFLE1BQU07U0FDakIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBL0RELDZCQStEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1hbmQgfSBmcm9tIFwiZGlzY29yZC1ha2Fpcm9cIjtcclxuaW1wb3J0IHsgTWVzc2FnZSwgTWVzc2FnZUVtYmVkLCBHdWlsZE1lbWJlciB9IGZyb20gXCJkaXNjb3JkLmpzXCI7XHJcbmltcG9ydCB7IEJhbnMgfSBmcm9tIFwiLi4vLi4vZGF0YWJhc2UvTW9kZWxzL0JhbnNcIjtcclxuaW1wb3J0IHsgUmVwb3NpdG9yeSB9IGZyb20gJ3R5cGVvcm0nO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFuQ29tbWFuZCBleHRlbmRzIENvbW1hbmQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJiYW5cIiwge1xyXG4gICAgICAgICAgICBhbGlhc2VzOiBbXCJiYW5cIl0sXHJcbiAgICAgICAgICAgIGNhdGVnb3J5OiBcIk1vZGVyYXRpb25cIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiYmFucyBhIG1lbWJlciBmcm9tIHRoZSBndWlsZFwiLFxyXG4gICAgICAgICAgICAgICAgdXNhZ2U6IFwiYmFuIFttZW1iZXJdIFtyZWFzb25dXCIsXHJcbiAgICAgICAgICAgICAgICBleGFtcGxlczogW1xyXG4gICAgICAgICAgICAgICAgICAgIFwiYmFuIEBOZW1pamFoIzYzOTEgcG9zaW5nIG5zZncgaW1hZ2VzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJiYW4gRGV2ZWxvcGVyIHwgVG9ieSBwb3N0aW5nIG5zZncgaW1hZ2VzXCJcclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmF0ZWxpbWl0OiAzLFxyXG4gICAgICAgICAgICB1c2VyUGVybWlzc2lvbnM6IFtcIkJBTl9NRU1CRVJTXCJdLFxyXG4gICAgICAgICAgICBhcmdzOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwibWVtYmVyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtZW1iZXJcIixcclxuICAgICAgICAgICAgICAgICAgICBwcm9tcHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IChtc2c6IE1lc3NhZ2UpID0+IGAke21zZy5hdXRob3J9LCBwbGVhc2UgcHJvdmlkZSBhIG1lbWJlciB0byBiYW4uLi5gLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXRyeTogKG1zZzogTWVzc2FnZSkgPT4gYCR7bXNnLmF1dGhvcn0sIHBsZWFzZSBwcm92aWRlIGEgdmFpbGQgbWVtYmVyIHRvIGJhbi4uLmBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcInJlYXNvblwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2g6IFwicmVzdFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IFwic3dlYXJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIGV4ZWMobWVzc2FnZTogTWVzc2FnZSwgeyBtZW1iZXIsIHJlYXNvbn06IHsgbWVtYmVyOiBHdWlsZE1lbWJlciwgcmVhc29uOiBzdHJpbmd9KTogUHJvbWlzZTxNZXNzYWdlPiB7XHJcbiAgICAgICAgY29uc3QgYmFuUmVwbzogUmVwb3NpdG9yeTxCYW5zPiA9IHRoaXMuY2xpZW50LmRiLmdldFJlcG9zaXRvcnkoQmFucyk7XHJcblxyXG4gICAgICAgIGlmKG1lbWJlci5yb2xlcy5oaWdoZXN0LnBvc2l0aW9uID49IG1lc3NhZ2UubWVtYmVyLnJvbGVzLmhpZ2hlc3QucG9zaXRpb24gJiYgbWVzc2FnZS5hdXRob3IuaWQgIT0gbWVzc2FnZS5ndWlsZC5vd25lcklEKVxyXG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZS5jaGFubmVsLnNlbmQoYCR7bWVzc2FnZS5hdXRob3IudGFnfS4geW91J3JlIG5vdCBhbGxvd2VkIHRvIGJhbiAke21lbWJlci51c2VyLnRhZ31gKTtcclxuXHJcblxyXG4gICAgICAgIG1lbWJlci5iYW4oKTtcclxuXHJcbiAgICAgICAgYXdhaXQgbWVzc2FnZS5jaGFubmVsLnNlbmQobmV3IE1lc3NhZ2VFbWJlZCgpXHJcbiAgICAgICAgICAgIC5zZXRUaXRsZShtZXNzYWdlLmd1aWxkLm5hbWUpXHJcbiAgICAgICAgICAgIC5hZGRGaWVsZHMoXHJcbiAgICAgICAgICAgICAgICB7IG5hbWU6IFwiTWVtYmVyIFwiLCB2YWx1ZTogbWVtYmVyLnVzZXIudGFnLCBpbmxpbmU6IHRydWV9LFxyXG4gICAgICAgICAgICAgICAgeyBuYW1lOiBcIlJlYXNvbiBcIiwgdmFsdWU6IHJlYXNvbiwgaW5saW5lOiB0cnVlfSxcclxuICAgICAgICAgICAgICAgIHsgbmFtZTogXCJNb2RlcmF0b3IgXCIsIHZhbHVlOiBtZXNzYWdlLmF1dGhvci50YWcsIGlubGluZTogZmFsc2V9LFxyXG4gICAgICAgICAgICAgICAgeyBuYW1lOiBcIk1vZGVyYXRvciBpZCBcIiwgdmFsdWU6IG1lc3NhZ2UuYXV0aG9yLmlkLCBpbmxpbmU6IGZhbHNlfSxcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAuc2V0VGltZXN0YW1wKClcclxuICAgICAgICAgICAgLnNldEZvb3RlcihtZW1iZXIudXNlci5kaXNwbGF5QXZhdGFyVVJMKHsgZHluYW1pYzogdHJ1ZX0pICsgbWVtYmVyLnVzZXIudGFnICsgXCIgaGFzIGJlZW4gYmFubmVkXCIpXHJcbiAgICAgICAgICAgIC5zZXRUaHVtYm5haWwobWVzc2FnZS5ndWlsZC5pY29uVVJMKHsgZHluYW1pYzogdHJ1ZSB9KSlcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBhd2FpdCBiYW5SZXBvLmluc2VydCh7XHJcbiAgICAgICAgICAgIGd1aWxkOiBtZXNzYWdlLmd1aWxkLmlkLFxyXG4gICAgICAgICAgICB1c2VyOiBtZW1iZXIuaWQsXHJcbiAgICAgICAgICAgIG1vZGVyYXRvcjogbWVzc2FnZS5hdXRob3IuaWQsXHJcbiAgICAgICAgICAgIHJlYXNvbjogcmVhc29uXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iXX0=