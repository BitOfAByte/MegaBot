"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const discord_js_1 = require("discord.js");
const banConfig = require('../../database/MySQL/Models/BanConfig');
class BanCommand extends discord_akairo_1.Command {
    constructor() {
        super("ban", {
            aliases: ["ban"],
            category: "Moderation",
            description: {
                content: "bans a member from the guild",
                usage: "ban [member] [reason]",
                examples: [
                    "ban @Nemijah#6391 posing nsfw images",
                    "ban Developer | Toby posting nsfw images"
                ]
            },
            ratelimit: 3,
            userPermissions: ["BAN_MEMBERS"],
            args: [
                {
                    id: "member",
                    type: "member",
                    prompt: {
                        start: (msg) => `${msg.author}, please provide a member to ban...`,
                        retry: (msg) => `${msg.author}, please provide a vaild member to ban...`
                    }
                },
                {
                    id: "reason",
                    type: "string",
                    match: "rest",
                    default: "swearing"
                }
            ]
        });
    }
    async exec(message, { member, reason }) {
        if (member.roles.highest.position >= message.member.roles.highest.position && message.author.id != message.guild.ownerID)
            return message.channel.send(`${message.author.tag}. you're not allowed to ban ${member.user.tag}`);
        member.ban();
        await message.channel.send(new discord_js_1.MessageEmbed()
            .setTitle(message.guild.name)
            .addFields({ name: "Member ", value: member.user.tag, inline: true }, { name: "Reason ", value: reason, inline: true }, { name: "Moderator ", value: message.author.tag, inline: false }, { name: "Moderator id ", value: message.author.id, inline: false })
            .setTimestamp()
            .setFooter(member.user.displayAvatarURL({ dynamic: true }) + member.user.tag + " has been banned")
            .setThumbnail(message.guild.iconURL({ dynamic: true })));
        await banConfig.create({
            user: member.user.tag,
            userId: member.id,
            reason: reason,
            moderator: message.author.tag,
            moderatorId: message.author.id,
            active: true,
        });
    }
}
exports.default = BanCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFuQ29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9Nb2RlcmF0aW9uL0JhbkNvbW1hbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBeUM7QUFDekMsMkNBQWdFO0FBRWhFLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO0FBRW5FLE1BQXFCLFVBQVcsU0FBUSx3QkFBTztJQUMzQztRQUNJLEtBQUssQ0FBQyxLQUFLLEVBQUU7WUFDVCxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUM7WUFDaEIsUUFBUSxFQUFFLFlBQVk7WUFDdEIsV0FBVyxFQUFFO2dCQUNULE9BQU8sRUFBRSw4QkFBOEI7Z0JBQ3ZDLEtBQUssRUFBRSx1QkFBdUI7Z0JBQzlCLFFBQVEsRUFBRTtvQkFDTixzQ0FBc0M7b0JBQ3RDLDBDQUEwQztpQkFDN0M7YUFDSjtZQUNELFNBQVMsRUFBRSxDQUFDO1lBQ1osZUFBZSxFQUFFLENBQUMsYUFBYSxDQUFDO1lBQ2hDLElBQUksRUFBRTtnQkFDRjtvQkFDSSxFQUFFLEVBQUUsUUFBUTtvQkFDWixJQUFJLEVBQUUsUUFBUTtvQkFDZCxNQUFNLEVBQUU7d0JBQ0osS0FBSyxFQUFFLENBQUMsR0FBWSxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLHFDQUFxQzt3QkFDM0UsS0FBSyxFQUFFLENBQUMsR0FBWSxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLDJDQUEyQztxQkFDcEY7aUJBQ0o7Z0JBQ0Q7b0JBQ0ksRUFBRSxFQUFFLFFBQVE7b0JBQ1osSUFBSSxFQUFFLFFBQVE7b0JBQ2QsS0FBSyxFQUFFLE1BQU07b0JBQ2IsT0FBTyxFQUFFLFVBQVU7aUJBQ3RCO2FBQ0o7U0FDSixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFnQixFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBeUM7UUFDekYsSUFBRyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU87WUFDbkgsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRywrQkFBK0IsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBR3ZHLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUViLE1BQU0sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSx5QkFBWSxFQUFFO2FBQ3hDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQzthQUM1QixTQUFTLENBQ04sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFDLEVBQ3hELEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUMsRUFDL0MsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLEVBQy9ELEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxDQUNwRTthQUNBLFlBQVksRUFBRTthQUNkLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsa0JBQWtCLENBQUM7YUFDaEcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FDMUQsQ0FBQztRQUVGLE1BQU0sU0FBUyxDQUFDLE1BQU0sQ0FBQztZQUNuQixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHO1lBQ3JCLE1BQU0sRUFBRSxNQUFNLENBQUMsRUFBRTtZQUNqQixNQUFNLEVBQUUsTUFBTTtZQUNkLFNBQVMsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUc7WUFDN0IsV0FBVyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUM5QixNQUFNLEVBQUUsSUFBSTtTQUNmLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSjtBQS9ERCw2QkErREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tYW5kIH0gZnJvbSBcImRpc2NvcmQtYWthaXJvXCI7XHJcbmltcG9ydCB7IE1lc3NhZ2UsIE1lc3NhZ2VFbWJlZCwgR3VpbGRNZW1iZXIgfSBmcm9tIFwiZGlzY29yZC5qc1wiO1xyXG5pbXBvcnQge3doZXJlfSBmcm9tIFwic2VxdWVsaXplXCI7XHJcbmNvbnN0IGJhbkNvbmZpZyA9IHJlcXVpcmUoJy4uLy4uL2RhdGFiYXNlL015U1FML01vZGVscy9CYW5Db25maWcnKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhbkNvbW1hbmQgZXh0ZW5kcyBDb21tYW5kIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwiYmFuXCIsIHtcclxuICAgICAgICAgICAgYWxpYXNlczogW1wiYmFuXCJdLFxyXG4gICAgICAgICAgICBjYXRlZ29yeTogXCJNb2RlcmF0aW9uXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcImJhbnMgYSBtZW1iZXIgZnJvbSB0aGUgZ3VpbGRcIixcclxuICAgICAgICAgICAgICAgIHVzYWdlOiBcImJhbiBbbWVtYmVyXSBbcmVhc29uXVwiLFxyXG4gICAgICAgICAgICAgICAgZXhhbXBsZXM6IFtcclxuICAgICAgICAgICAgICAgICAgICBcImJhbiBATmVtaWphaCM2MzkxIHBvc2luZyBuc2Z3IGltYWdlc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiYmFuIERldmVsb3BlciB8IFRvYnkgcG9zdGluZyBuc2Z3IGltYWdlc1wiXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJhdGVsaW1pdDogMyxcclxuICAgICAgICAgICAgdXNlclBlcm1pc3Npb25zOiBbXCJCQU5fTUVNQkVSU1wiXSxcclxuICAgICAgICAgICAgYXJnczogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIm1lbWJlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibWVtYmVyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvbXB0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiAobXNnOiBNZXNzYWdlKSA9PiBgJHttc2cuYXV0aG9yfSwgcGxlYXNlIHByb3ZpZGUgYSBtZW1iZXIgdG8gYmFuLi4uYCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0cnk6IChtc2c6IE1lc3NhZ2UpID0+IGAke21zZy5hdXRob3J9LCBwbGVhc2UgcHJvdmlkZSBhIHZhaWxkIG1lbWJlciB0byBiYW4uLi5gXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogXCJyZWFzb25cIixcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoOiBcInJlc3RcIixcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBcInN3ZWFyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyBleGVjKG1lc3NhZ2U6IE1lc3NhZ2UsIHsgbWVtYmVyLCByZWFzb259OiB7IG1lbWJlcjogR3VpbGRNZW1iZXIsIHJlYXNvbjogc3RyaW5nfSk6IFByb21pc2U8TWVzc2FnZT4ge1xyXG4gICAgICAgIGlmKG1lbWJlci5yb2xlcy5oaWdoZXN0LnBvc2l0aW9uID49IG1lc3NhZ2UubWVtYmVyLnJvbGVzLmhpZ2hlc3QucG9zaXRpb24gJiYgbWVzc2FnZS5hdXRob3IuaWQgIT0gbWVzc2FnZS5ndWlsZC5vd25lcklEKVxyXG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZS5jaGFubmVsLnNlbmQoYCR7bWVzc2FnZS5hdXRob3IudGFnfS4geW91J3JlIG5vdCBhbGxvd2VkIHRvIGJhbiAke21lbWJlci51c2VyLnRhZ31gKTtcclxuXHJcblxyXG4gICAgICAgIG1lbWJlci5iYW4oKTtcclxuXHJcbiAgICAgICAgYXdhaXQgbWVzc2FnZS5jaGFubmVsLnNlbmQobmV3IE1lc3NhZ2VFbWJlZCgpXHJcbiAgICAgICAgICAgIC5zZXRUaXRsZShtZXNzYWdlLmd1aWxkLm5hbWUpXHJcbiAgICAgICAgICAgIC5hZGRGaWVsZHMoXHJcbiAgICAgICAgICAgICAgICB7IG5hbWU6IFwiTWVtYmVyIFwiLCB2YWx1ZTogbWVtYmVyLnVzZXIudGFnLCBpbmxpbmU6IHRydWV9LFxyXG4gICAgICAgICAgICAgICAgeyBuYW1lOiBcIlJlYXNvbiBcIiwgdmFsdWU6IHJlYXNvbiwgaW5saW5lOiB0cnVlfSxcclxuICAgICAgICAgICAgICAgIHsgbmFtZTogXCJNb2RlcmF0b3IgXCIsIHZhbHVlOiBtZXNzYWdlLmF1dGhvci50YWcsIGlubGluZTogZmFsc2V9LFxyXG4gICAgICAgICAgICAgICAgeyBuYW1lOiBcIk1vZGVyYXRvciBpZCBcIiwgdmFsdWU6IG1lc3NhZ2UuYXV0aG9yLmlkLCBpbmxpbmU6IGZhbHNlfSxcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAuc2V0VGltZXN0YW1wKClcclxuICAgICAgICAgICAgLnNldEZvb3RlcihtZW1iZXIudXNlci5kaXNwbGF5QXZhdGFyVVJMKHsgZHluYW1pYzogdHJ1ZX0pICsgbWVtYmVyLnVzZXIudGFnICsgXCIgaGFzIGJlZW4gYmFubmVkXCIpXHJcbiAgICAgICAgICAgIC5zZXRUaHVtYm5haWwobWVzc2FnZS5ndWlsZC5pY29uVVJMKHsgZHluYW1pYzogdHJ1ZSB9KSlcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBhd2FpdCBiYW5Db25maWcuY3JlYXRlKHtcclxuICAgICAgICAgICAgdXNlcjogbWVtYmVyLnVzZXIudGFnLFxyXG4gICAgICAgICAgICB1c2VySWQ6IG1lbWJlci5pZCxcclxuICAgICAgICAgICAgcmVhc29uOiByZWFzb24sXHJcbiAgICAgICAgICAgIG1vZGVyYXRvcjogbWVzc2FnZS5hdXRob3IudGFnLFxyXG4gICAgICAgICAgICBtb2RlcmF0b3JJZDogbWVzc2FnZS5hdXRob3IuaWQsXHJcbiAgICAgICAgICAgIGFjdGl2ZTogdHJ1ZSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4iXX0=