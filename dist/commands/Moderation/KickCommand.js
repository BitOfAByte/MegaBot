"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const discord_js_1 = require("discord.js");
class KickCommand extends discord_akairo_1.Command {
    constructor(props) {
        super("kick", {
            aliases: ["boot", "kick"],
            category: "Moderation",
            description: {
                content: "Kicks a member from the guild and saves it into the database..",
                usage: "kick [ user ] [ reason ]",
                examples: [
                    "kick Nemijah#6392 disrespectful towards staff",
                    "kick Toby disrespectful towards staff"
                ]
            },
            userPermissions: ["KICK_MEMBERS"],
            ratelimit: 3,
            args: [
                {
                    id: "member",
                    type: "member",
                    prompt: {
                        start: (msg) => `${msg.author}, please provide a member to kick`,
                        retry: (msg) => `${msg.author}, please provide a vaild member to warn...`
                    }
                },
                {
                    id: "reason",
                    type: "string",
                    match: "rest",
                    default: "disrespectful towards staff"
                }
            ]
        });
    }
    async exec(message, { member, reason }) {
        if (member.roles.highest.position >= message.member.roles.highest.position && message.author.id != message.guild.ownerID)
            return message.channel.send(`${message.author.tag}. you're not allowed to kick ${member.user.tag}`);
        await member.kick();
        await message.channel.send(new discord_js_1.MessageEmbed()
            .setTitle(message.guild.name)
            .addFields({ name: "Member ", value: member.user.tag, inline: true }, { name: "Reason ", value: reason, inline: true }, { name: "Moderator ", value: message.author.tag, inline: false }, { name: "Moderator id ", value: message.author.id, inline: false })
            .setTimestamp()
            .setFooter(member.user.displayAvatarURL({ dynamic: true }) + member.user.tag + " has been kicked")
            .setThumbnail(message.guild.iconURL({ dynamic: true })));
    }
}
exports.default = KickCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS2lja0NvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvTW9kZXJhdGlvbi9LaWNrQ29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1EQUF5QztBQUN6QywyQ0FBZ0U7QUFFaEUsTUFBcUIsV0FBWSxTQUFTLHdCQUFPO0lBQzdDLFlBQVksS0FBSztRQUNiLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDVixPQUFPLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO1lBQ3pCLFFBQVEsRUFBRSxZQUFZO1lBQ3RCLFdBQVcsRUFBRTtnQkFDVCxPQUFPLEVBQUUsZ0VBQWdFO2dCQUN6RSxLQUFLLEVBQUUsMEJBQTBCO2dCQUNqQyxRQUFRLEVBQUU7b0JBQ04sK0NBQStDO29CQUMvQyx1Q0FBdUM7aUJBQzFDO2FBQ0o7WUFDRCxlQUFlLEVBQUUsQ0FBQyxjQUFjLENBQUM7WUFDakMsU0FBUyxFQUFFLENBQUM7WUFDWixJQUFJLEVBQUU7Z0JBQ0Y7b0JBQ0ksRUFBRSxFQUFFLFFBQVE7b0JBQ1osSUFBSSxFQUFFLFFBQVE7b0JBQ2QsTUFBTSxFQUFFO3dCQUNKLEtBQUssRUFBRSxDQUFDLEdBQVksRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxtQ0FBbUM7d0JBQ3pFLEtBQUssRUFBRSxDQUFDLEdBQVksRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSw0Q0FBNEM7cUJBQ3JGO2lCQUNKO2dCQUNEO29CQUNJLEVBQUUsRUFBRSxRQUFRO29CQUNaLElBQUksRUFBRSxRQUFRO29CQUNkLEtBQUssRUFBRSxNQUFNO29CQUNiLE9BQU8sRUFBRSw2QkFBNkI7aUJBQ3pDO2FBQ0o7U0FDSixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFnQixFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBMkM7UUFHM0YsSUFBRyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU87WUFDbkgsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxnQ0FBZ0MsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBR3hHLE1BQU0sTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRXBCLE1BQU0sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSx5QkFBWSxFQUFFO2FBQ3hDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQzthQUM1QixTQUFTLENBQ04sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFDLEVBQ3hELEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUMsRUFDL0MsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLEVBQy9ELEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxDQUNwRTthQUNBLFlBQVksRUFBRTthQUNkLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsa0JBQWtCLENBQUM7YUFDaEcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FDMUQsQ0FBQztJQUNOLENBQUM7Q0FDSjtBQXhERCw4QkF3REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tYW5kIH0gZnJvbSAnZGlzY29yZC1ha2Fpcm8nO1xyXG5pbXBvcnQgeyBNZXNzYWdlRW1iZWQsIE1lc3NhZ2UsIEd1aWxkTWVtYmVyIH0gZnJvbSBcImRpc2NvcmQuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEtpY2tDb21tYW5kIGV4dGVuZHMgIENvbW1hbmQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihcImtpY2tcIiwge1xyXG4gICAgICAgICAgICBhbGlhc2VzOiBbXCJib290XCIsIFwia2lja1wiXSxcclxuICAgICAgICAgICAgY2F0ZWdvcnk6IFwiTW9kZXJhdGlvblwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgY29udGVudDogXCJLaWNrcyBhIG1lbWJlciBmcm9tIHRoZSBndWlsZCBhbmQgc2F2ZXMgaXQgaW50byB0aGUgZGF0YWJhc2UuLlwiLFxyXG4gICAgICAgICAgICAgICAgdXNhZ2U6IFwia2ljayBbIHVzZXIgXSBbIHJlYXNvbiBdXCIsXHJcbiAgICAgICAgICAgICAgICBleGFtcGxlczogW1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2ljayBOZW1pamFoIzYzOTIgZGlzcmVzcGVjdGZ1bCB0b3dhcmRzIHN0YWZmXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJraWNrIFRvYnkgZGlzcmVzcGVjdGZ1bCB0b3dhcmRzIHN0YWZmXCJcclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdXNlclBlcm1pc3Npb25zOiBbXCJLSUNLX01FTUJFUlNcIl0sXHJcbiAgICAgICAgICAgIHJhdGVsaW1pdDogMyxcclxuICAgICAgICAgICAgYXJnczogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIm1lbWJlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibWVtYmVyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvbXB0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiAobXNnOiBNZXNzYWdlKSA9PiBgJHttc2cuYXV0aG9yfSwgcGxlYXNlIHByb3ZpZGUgYSBtZW1iZXIgdG8ga2lja2AsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHJ5OiAobXNnOiBNZXNzYWdlKSA9PiBgJHttc2cuYXV0aG9yfSwgcGxlYXNlIHByb3ZpZGUgYSB2YWlsZCBtZW1iZXIgdG8gd2Fybi4uLmBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcInJlYXNvblwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2g6IFwicmVzdFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IFwiZGlzcmVzcGVjdGZ1bCB0b3dhcmRzIHN0YWZmXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyBleGVjKG1lc3NhZ2U6IE1lc3NhZ2UsIHsgbWVtYmVyLCByZWFzb24gfTogeyBtZW1iZXI6IEd1aWxkTWVtYmVyLCByZWFzb246IHN0cmluZyB9KTogUHJvbWlzZTxNZXNzYWdlPiB7XHJcblxyXG5cclxuICAgICAgICBpZihtZW1iZXIucm9sZXMuaGlnaGVzdC5wb3NpdGlvbiA+PSBtZXNzYWdlLm1lbWJlci5yb2xlcy5oaWdoZXN0LnBvc2l0aW9uICYmIG1lc3NhZ2UuYXV0aG9yLmlkICE9IG1lc3NhZ2UuZ3VpbGQub3duZXJJRClcclxuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2UuY2hhbm5lbC5zZW5kKGAke21lc3NhZ2UuYXV0aG9yLnRhZ30uIHlvdSdyZSBub3QgYWxsb3dlZCB0byBraWNrICR7bWVtYmVyLnVzZXIudGFnfWApO1xyXG5cclxuXHJcbiAgICAgICAgYXdhaXQgbWVtYmVyLmtpY2soKTtcclxuXHJcbiAgICAgICAgYXdhaXQgbWVzc2FnZS5jaGFubmVsLnNlbmQobmV3IE1lc3NhZ2VFbWJlZCgpXHJcbiAgICAgICAgICAgIC5zZXRUaXRsZShtZXNzYWdlLmd1aWxkLm5hbWUpXHJcbiAgICAgICAgICAgIC5hZGRGaWVsZHMoXHJcbiAgICAgICAgICAgICAgICB7IG5hbWU6IFwiTWVtYmVyIFwiLCB2YWx1ZTogbWVtYmVyLnVzZXIudGFnLCBpbmxpbmU6IHRydWV9LFxyXG4gICAgICAgICAgICAgICAgeyBuYW1lOiBcIlJlYXNvbiBcIiwgdmFsdWU6IHJlYXNvbiwgaW5saW5lOiB0cnVlfSxcclxuICAgICAgICAgICAgICAgIHsgbmFtZTogXCJNb2RlcmF0b3IgXCIsIHZhbHVlOiBtZXNzYWdlLmF1dGhvci50YWcsIGlubGluZTogZmFsc2V9LFxyXG4gICAgICAgICAgICAgICAgeyBuYW1lOiBcIk1vZGVyYXRvciBpZCBcIiwgdmFsdWU6IG1lc3NhZ2UuYXV0aG9yLmlkLCBpbmxpbmU6IGZhbHNlfSxcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAuc2V0VGltZXN0YW1wKClcclxuICAgICAgICAgICAgLnNldEZvb3RlcihtZW1iZXIudXNlci5kaXNwbGF5QXZhdGFyVVJMKHsgZHluYW1pYzogdHJ1ZX0pICsgbWVtYmVyLnVzZXIudGFnICsgXCIgaGFzIGJlZW4ga2lja2VkXCIpXHJcbiAgICAgICAgICAgIC5zZXRUaHVtYm5haWwobWVzc2FnZS5ndWlsZC5pY29uVVJMKHsgZHluYW1pYzogdHJ1ZSB9KSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59Il19