"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const node_fetch_1 = require("node-fetch");
class DjsCommand extends discord_akairo_1.Command {
    constructor() {
        super("djs", {
            aliases: ["docs"],
            category: "Public",
            description: {
                content: "pulls info from djs docs",
                usage: "djs [ args ]",
                examples: [
                    "djs Client",
                ]
            },
            ratelimit: 3,
            args: [
                {
                    id: "query",
                    type: "string",
                }
            ]
        });
    }
    async exec(message, { query }) {
        const url = `https://djsdocs.sorta.moe/v2/embed?src=stable&q=${encodeURIComponent(query)}`;
        const docFetch = await node_fetch_1.fetch(url);
        const embed = docFetch.json();
        if (!embed || embed.error) {
            return await message.reply(`Invaild content ${query}`);
        }
        if (!message.guild) {
            await message.reply({ embed });
        }
        const msg = await message.channel.send(embed);
        await msg.react('❌');
        let react;
        try {
            react = await msg.awaitReactions((reaction, user) => reaction.emoji.name === '❌' && user.id === message.author.id, { max: 1, time: 10000, errors: ['time'] });
        }
        catch (e) {
            await msg.reactions.removeAll();
            await msg.reply(`**ERROR** ${e}`);
        }
        if (react && react.first())
            await message.delete();
    }
}
exports.default = DjsCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGpzQ29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9QdWJsaWMvRGpzQ29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1EQUF5QztBQUV6QywyQ0FBbUM7QUFHbkMsTUFBcUIsVUFBVyxTQUFRLHdCQUFPO0lBQzNDO1FBQ0ksS0FBSyxDQUFDLEtBQUssRUFBRTtZQUNULE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQztZQUNqQixRQUFRLEVBQUUsUUFBUTtZQUNsQixXQUFXLEVBQUU7Z0JBQ1QsT0FBTyxFQUFFLDBCQUEwQjtnQkFDbkMsS0FBSyxFQUFFLGNBQWM7Z0JBQ3JCLFFBQVEsRUFBRTtvQkFDTixZQUFZO2lCQUNmO2FBQ0o7WUFDRCxTQUFTLEVBQUUsQ0FBQztZQUNaLElBQUksRUFBRTtnQkFDRjtvQkFDSSxFQUFFLEVBQUUsT0FBTztvQkFDWCxJQUFJLEVBQUUsUUFBUTtpQkFDakI7YUFDSjtTQUNKLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDTSxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQWdCLEVBQUUsRUFBRSxLQUFLLEVBQXFCO1FBQzVELE1BQU0sR0FBRyxHQUFHLG1EQUFtRCxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFBO1FBRTFGLE1BQU0sUUFBUSxHQUFHLE1BQU0sa0JBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQyxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFOUIsSUFBRyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFHO1lBQ3hCLE9BQU8sTUFBTSxPQUFPLENBQUMsS0FBSyxDQUFDLG1CQUFtQixLQUFLLEVBQUUsQ0FBQyxDQUFBO1NBQ3hEO1FBRUQsSUFBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7WUFDZixNQUFNLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO1NBQ2pDO1FBRUQsTUFBTSxHQUFHLEdBQUcsTUFBTSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUM3QyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFckIsSUFBSSxLQUFLLENBQUM7UUFFVixJQUFJO1lBQ0EsS0FBSyxHQUFHLE1BQU0sR0FBRyxDQUFDLGNBQWMsQ0FDNUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLEVBQUUsS0FBSyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFDaEYsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUMsQ0FDM0MsQ0FBQTtTQUNKO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDUixNQUFNLEdBQUcsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDaEMsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQTtTQUNwQztRQUVELElBQUcsS0FBSyxJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUU7WUFBRSxNQUFNLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUV0RCxDQUFDO0NBQ0o7QUFyREQsNkJBcURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gXCJkaXNjb3JkLWFrYWlyb1wiO1xyXG5pbXBvcnQgeyBNZXNzYWdlLCBNZXNzYWdlRW1iZWQsIEd1aWxkTWVtYmVyIH0gZnJvbSBcImRpc2NvcmQuanNcIjtcclxuaW1wb3J0IHsgZmV0Y2ggfSBmcm9tICdub2RlLWZldGNoJztcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEanNDb21tYW5kIGV4dGVuZHMgQ29tbWFuZCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcImRqc1wiLCB7XHJcbiAgICAgICAgICAgIGFsaWFzZXM6IFtcImRvY3NcIl0sXHJcbiAgICAgICAgICAgIGNhdGVnb3J5OiBcIlB1YmxpY1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgY29udGVudDogXCJwdWxscyBpbmZvIGZyb20gZGpzIGRvY3NcIixcclxuICAgICAgICAgICAgICAgIHVzYWdlOiBcImRqcyBbIGFyZ3MgXVwiLFxyXG4gICAgICAgICAgICAgICAgZXhhbXBsZXM6IFtcclxuICAgICAgICAgICAgICAgICAgICBcImRqcyBDbGllbnRcIixcclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmF0ZWxpbWl0OiAzLFxyXG4gICAgICAgICAgICBhcmdzOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwicXVlcnlcIixcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgYXN5bmMgZXhlYyhtZXNzYWdlOiBNZXNzYWdlLCB7IHF1ZXJ5IH06IHsgcXVlcnk6IHN0cmluZyB9KTogUHJvbWlzZTxNZXNzYWdlPiB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gYGh0dHBzOi8vZGpzZG9jcy5zb3J0YS5tb2UvdjIvZW1iZWQ/c3JjPXN0YWJsZSZxPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHF1ZXJ5KX1gXHJcblxyXG4gICAgICAgIGNvbnN0IGRvY0ZldGNoID0gYXdhaXQgZmV0Y2godXJsKTtcclxuICAgICAgICBjb25zdCBlbWJlZCA9IGRvY0ZldGNoLmpzb24oKTtcclxuXHJcbiAgICAgICAgaWYoIWVtYmVkIHx8IGVtYmVkLmVycm9yICkge1xyXG4gICAgICAgICAgIHJldHVybiBhd2FpdCBtZXNzYWdlLnJlcGx5KGBJbnZhaWxkIGNvbnRlbnQgJHtxdWVyeX1gKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoIW1lc3NhZ2UuZ3VpbGQpIHtcclxuICAgICAgICAgICAgYXdhaXQgbWVzc2FnZS5yZXBseSh7IGVtYmVkIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBtc2cgPSBhd2FpdCBtZXNzYWdlLmNoYW5uZWwuc2VuZChlbWJlZClcclxuICAgICAgICBhd2FpdCBtc2cucmVhY3QoJ+KdjCcpO1xyXG5cclxuICAgICAgICBsZXQgcmVhY3Q7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJlYWN0ID0gYXdhaXQgbXNnLmF3YWl0UmVhY3Rpb25zKFxyXG4gICAgICAgICAgICAgICAgKHJlYWN0aW9uLCB1c2VyKSA9PiByZWFjdGlvbi5lbW9qaS5uYW1lID09PSAn4p2MJyAmJiB1c2VyLmlkID09PSBtZXNzYWdlLmF1dGhvci5pZCxcclxuICAgICAgICAgICAgICAgIHsgbWF4OiAxLCB0aW1lOiAxMDAwMCwgZXJyb3JzOiBbJ3RpbWUnXX1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgYXdhaXQgbXNnLnJlYWN0aW9ucy5yZW1vdmVBbGwoKTtcclxuICAgICAgICAgICAgYXdhaXQgbXNnLnJlcGx5KGAqKkVSUk9SKiogJHtlfWApXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZihyZWFjdCAmJiByZWFjdC5maXJzdCgpKSBhd2FpdCBtZXNzYWdlLmRlbGV0ZSgpO1xyXG5cclxuICAgIH1cclxufVxyXG4iXX0=