"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const { MessageAttachment } = require('discord.js');
const canvacord = require('canvacord');
const Levels = require('hive-xp');
class LevelCommand extends discord_akairo_1.Command {
    constructor() {
        super("level", {
            aliases: ["rank", "level"],
            category: "Public",
            description: {
                content: "Displays the level you're in",
                usage: "level"
            },
        });
    }
    async exec(message) {
        const user = await Levels.fetch(message.author.id, message.guild.id);
        const neededXp = Levels.xpFor(parseInt(user.level) + 1);
        const rank = new canvacord.Rank()
            .setAvatar(message.author.displayAvatarURL({ dynamic: false, format: 'png' }))
            .setCurrentXP(user.xp)
            .setRequiredXP(neededXp)
            .setStatus(message.author.presence.status)
            .setLevel(user.level)
            .setProgressBar("#FFA500", "COLOR")
            .setUsername(message.author.username)
            .setDiscriminator(message.author.discriminator);
        return rank.build()
            .then(data => {
            const attachment = new MessageAttachment(data, "RankCard.png");
            message.channel.send(attachment);
        });
    }
}
exports.default = LevelCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGV2ZWxDb21tYW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1hbmRzL1B1YmxpYy9MZXZlbENvbW1hbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBeUM7QUFFekMsTUFBTSxFQUFFLGlCQUFpQixFQUFFLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3BELE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN2QyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFbEMsTUFBcUIsWUFBYSxTQUFRLHdCQUFPO0lBQzdDO1FBQ0ksS0FBSyxDQUFDLE9BQU8sRUFBRTtZQUNYLE9BQU8sRUFBRSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUM7WUFDMUIsUUFBUSxFQUFFLFFBQVE7WUFDbEIsV0FBVyxFQUFFO2dCQUNULE9BQU8sRUFBRSw4QkFBOEI7Z0JBQ3ZDLEtBQUssRUFBRSxPQUFPO2FBQ2pCO1NBQ0osQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBZ0I7UUFDOUIsTUFBTSxJQUFJLEdBQUcsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckUsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBR3hELE1BQU0sSUFBSSxHQUFHLElBQUksU0FBUyxDQUFDLElBQUksRUFBRTthQUM1QixTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7YUFDN0UsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7YUFDckIsYUFBYSxDQUFDLFFBQVEsQ0FBQzthQUN2QixTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO2FBQ3pDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO2FBQ3BCLGNBQWMsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDO2FBQ2xDLFdBQVcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQzthQUNwQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRXBELE9BQU8sSUFBSSxDQUFDLEtBQUssRUFBRTthQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNULE1BQU0sVUFBVSxHQUFHLElBQUksaUJBQWlCLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1lBQy9ELE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQztDQUNKO0FBakNELCtCQWlDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1hbmQgfSBmcm9tIFwiZGlzY29yZC1ha2Fpcm9cIjtcclxuaW1wb3J0IHsgTWVzc2FnZSB9IGZyb20gXCJkaXNjb3JkLmpzXCI7XHJcbmNvbnN0IHsgTWVzc2FnZUF0dGFjaG1lbnQgfSA9IHJlcXVpcmUoJ2Rpc2NvcmQuanMnKTtcclxuY29uc3QgY2FudmFjb3JkID0gcmVxdWlyZSgnY2FudmFjb3JkJyk7XHJcbmNvbnN0IExldmVscyA9IHJlcXVpcmUoJ2hpdmUteHAnKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExldmVsQ29tbWFuZCBleHRlbmRzIENvbW1hbmQge1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwibGV2ZWxcIiwge1xyXG4gICAgICAgICAgICBhbGlhc2VzOiBbXCJyYW5rXCIsIFwibGV2ZWxcIl0sXHJcbiAgICAgICAgICAgIGNhdGVnb3J5OiBcIlB1YmxpY1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgY29udGVudDogXCJEaXNwbGF5cyB0aGUgbGV2ZWwgeW91J3JlIGluXCIsXHJcbiAgICAgICAgICAgICAgICB1c2FnZTogXCJsZXZlbFwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIGV4ZWMobWVzc2FnZTogTWVzc2FnZSk6IFByb21pc2U8TWVzc2FnZT4ge1xyXG4gICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBMZXZlbHMuZmV0Y2gobWVzc2FnZS5hdXRob3IuaWQsIG1lc3NhZ2UuZ3VpbGQuaWQpO1xyXG4gICAgICAgIGNvbnN0IG5lZWRlZFhwID0gTGV2ZWxzLnhwRm9yKHBhcnNlSW50KHVzZXIubGV2ZWwpICsgMSk7XHJcblxyXG5cclxuICAgICAgICBjb25zdCByYW5rID0gbmV3IGNhbnZhY29yZC5SYW5rKClcclxuICAgICAgICAgICAgLnNldEF2YXRhcihtZXNzYWdlLmF1dGhvci5kaXNwbGF5QXZhdGFyVVJMKHsgZHluYW1pYzogZmFsc2UsIGZvcm1hdDogJ3BuZycgfSkpXHJcbiAgICAgICAgICAgIC5zZXRDdXJyZW50WFAodXNlci54cClcclxuICAgICAgICAgICAgLnNldFJlcXVpcmVkWFAobmVlZGVkWHApXHJcbiAgICAgICAgICAgIC5zZXRTdGF0dXMobWVzc2FnZS5hdXRob3IucHJlc2VuY2Uuc3RhdHVzKVxyXG4gICAgICAgICAgICAuc2V0TGV2ZWwodXNlci5sZXZlbClcclxuICAgICAgICAgICAgLnNldFByb2dyZXNzQmFyKFwiI0ZGQTUwMFwiLCBcIkNPTE9SXCIpXHJcbiAgICAgICAgICAgIC5zZXRVc2VybmFtZShtZXNzYWdlLmF1dGhvci51c2VybmFtZSlcclxuICAgICAgICAgICAgLnNldERpc2NyaW1pbmF0b3IobWVzc2FnZS5hdXRob3IuZGlzY3JpbWluYXRvcik7XHJcblxyXG4gICAgICAgIHJldHVybiByYW5rLmJ1aWxkKClcclxuICAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRhY2htZW50ID0gbmV3IE1lc3NhZ2VBdHRhY2htZW50KGRhdGEsIFwiUmFua0NhcmQucG5nXCIpO1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZS5jaGFubmVsLnNlbmQoYXR0YWNobWVudCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG59Il19